<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dashdashzako</title>
    <link>https://dashdashzako.net/</link>
    <description>Recent content on dashdashzako</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 21 Nov 2018 10:59:29 +0100</lastBuildDate>
    
	<atom:link href="https://dashdashzako.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Handling Video Buffered Time Ranges</title>
      <link>https://dashdashzako.net/2018/handling-video-buffered-time-ranges/</link>
      <pubDate>Wed, 21 Nov 2018 10:59:29 +0100</pubDate>
      
      <guid>https://dashdashzako.net/2018/handling-video-buffered-time-ranges/</guid>
      <description>When building a web media player, one may want to let the user know what part of the media has been loaded.
Usually, it is displayed on top of the seekbar in a slightly more contrasted tone:
Actually, I honestly don&amp;rsquo;t know what this information is good for, but not having it feels like kind of weird. Of course I can still use a player without this feature, but I believe I got used to having it on popular players and expect to have it on every other player.</description>
    </item>
    
    <item>
      <title>Working with Hugo v43 and TravisCI</title>
      <link>https://dashdashzako.net/2018/working-with-hugo-v43-and-travisci/</link>
      <pubDate>Thu, 06 Sep 2018 12:00:00 +0200</pubDate>
      
      <guid>https://dashdashzako.net/2018/working-with-hugo-v43-and-travisci/</guid>
      <description>Since Hugo v43, you can use a brand new assets pipeline called Hugo Pipes that allows using SASS/SCSS files without relying on another build tool such as Gulp or Grunt.
However, updating Hugo and your code to use Pipes will not work out of the box.
This post is a follow up of my &amp;ldquo;Publishing a website built with Hugo to GitHub Pages&amp;rdquo; post.
Pipes require the extended version of Hugo  Hugo is now released with two binary version: One with and one without SCSS/SASS support.</description>
    </item>
    
    <item>
      <title>Monthly report for July 2018</title>
      <link>https://dashdashzako.net/2018/monthly-report-for-july-2018/</link>
      <pubDate>Tue, 31 Jul 2018 20:00:00 +0100</pubDate>
      
      <guid>https://dashdashzako.net/2018/monthly-report-for-july-2018/</guid>
      <description>The Redux JavaScript library Even though this library was released in 2015, I only pay decent attention to it now. That makes me 3 years late, but I&amp;rsquo;ll live with that.
I&amp;rsquo;ve thoroughly followed the Tyler McGinnis Redux course, and I think that I&amp;rsquo;ve got a pretty good understanding on how to use Redux (this was obviously one of the main purpose of the course), but more importantly when to use it.</description>
    </item>
    
    <item>
      <title>Deploying a website built with Hugo to GitHub Pages</title>
      <link>https://dashdashzako.net/2018/deploying-a-website-built-with-hugo-to-github-pages/</link>
      <pubDate>Fri, 13 Jul 2018 16:00:00 +0200</pubDate>
      
      <guid>https://dashdashzako.net/2018/deploying-a-website-built-with-hugo-to-github-pages/</guid>
      <description>I&amp;rsquo;ve been building some static websites using GitHub pages. The flow is roughly always the same: code is pushed to the master branch, continuous integration tool kicks in, and result is published to the gh-pages branch.
That sounds quite simple, but there are a few dozens of ways to do it, and I feel like I&amp;rsquo;ve managed over the last few years to build my (probably shared with thousands of developers) own decent way of doing it using TravisCI.</description>
    </item>
    
    <item>
      <title>Monthly report for June 2018</title>
      <link>https://dashdashzako.net/2018/monthly-report-for-june-2018/</link>
      <pubDate>Sat, 30 Jun 2018 20:00:00 +0100</pubDate>
      
      <guid>https://dashdashzako.net/2018/monthly-report-for-june-2018/</guid>
      <description>10 Things I Regret About Node.js
Video of Ryan Dahl at the JSConf EU 2018.
 We have a problem with promises
A good article explaining how Promise object works by Nolan Lawson.
 Why I won’t be using Fetch API in my apps - Shahar Talmi
The author of this post explains why he wouldn&amp;rsquo;t directly use the fetch API in his applications. The short version is: it&amp;rsquo;s too low level to be used as-is.</description>
    </item>
    
    <item>
      <title>Monthly report for May 2018</title>
      <link>https://dashdashzako.net/2018/monthly-report-for-may-2018/</link>
      <pubDate>Thu, 31 May 2018 20:00:00 +0100</pubDate>
      
      <guid>https://dashdashzako.net/2018/monthly-report-for-may-2018/</guid>
      <description>7 Lessons from Developing an Accessible HTML 5 Video Player – Paul Schantz  This post-mortem was written in 2015 and browsers support has greatly improved over the last years, but it remains valid for the most part.
 Designing Accessible Web Content for Older Users
This video is taken from the Inclusive Design #24 conference held in 2017. Speaker is Makoto Ueki, chairman of WAIC in Japan.   Accessible web design for people with disabilities often benefits older users.</description>
    </item>
    
    <item>
      <title>Monthly report for April 2018</title>
      <link>https://dashdashzako.net/2018/monthly-report-for-april-2018/</link>
      <pubDate>Mon, 30 Apr 2018 20:00:00 +0100</pubDate>
      
      <guid>https://dashdashzako.net/2018/monthly-report-for-april-2018/</guid>
      <description>Kibana I spent some time working with Kibana and trying to understand some data inconsistency when using the Elasticsearch has_parent query. For a given query using it, it was obvious not every documents were returned. Using the same datsaset on a different Elasticsearch instance, I still had inconsistency though the results were different.
After properly reading the dozen pages of documentation about the join queries, I found something interesting in the definitive guide:</description>
    </item>
    
    <item>
      <title>Monthly report for March 2018</title>
      <link>https://dashdashzako.net/2018/monthly-report-for-march-2018/</link>
      <pubDate>Sat, 31 Mar 2018 20:00:00 +0100</pubDate>
      
      <guid>https://dashdashzako.net/2018/monthly-report-for-march-2018/</guid>
      <description>Making data explorable The project I&amp;rsquo;m working on had its dataset scattered in various places: CSV files, MySQL tables, even JSON files. This dataset is meant to be used by my teammates to verify some of their hypotheses, but also to be explored in a more free fashion by other researchers.
To verify hypotheses, my teammates extracted some data from one source, copied it in some pivot format, performed a query on another tool, reformated and reinserted data in the same pivot format… You get the idea, it&amp;rsquo;s not really something that sounds fun to deal with.</description>
    </item>
    
    <item>
      <title>Monthly report for February 2018</title>
      <link>https://dashdashzako.net/2018/monthly-report-for-february-2018/</link>
      <pubDate>Wed, 28 Feb 2018 20:00:00 +0100</pubDate>
      
      <guid>https://dashdashzako.net/2018/monthly-report-for-february-2018/</guid>
      <description>Project Management This month I had to set up a couple of tools to help the team with project and resources management. Some tools were already made available to me, so I tried to make good use of them:
 Taiga, a project management platform; a random wiki platform I can&amp;rsquo;t remember the name; GitLab for the code issues.  After trying to tie every tools altogether, it all ended in a massive failure, which made me consider using another combination of tools.</description>
    </item>
    
    <item>
      <title>Monthly report for January 2018</title>
      <link>https://dashdashzako.net/2018/monthly-report-for-january-2018/</link>
      <pubDate>Wed, 31 Jan 2018 20:00:00 +0100</pubDate>
      
      <guid>https://dashdashzako.net/2018/monthly-report-for-january-2018/</guid>
      <description>Typography related stuff Oh why did I ask myself &amp;ldquo;serif or sans serif?&amp;ldquo;…
Until recently I didn&amp;rsquo;t know much about the topic other than the aesthetics point of view. There are quite a few research papers about it, and one could spend an entire week switching from an opinion to the other. The topic is so debatable and debated that I couldn&amp;rsquo;t find a definitive answer to my question, but the overall feeling I got is that there might be some benefit in using sans serif over serif typeface in a web context, even though the magnitude may be difficult to perceive.</description>
    </item>
    
  </channel>
</rss>